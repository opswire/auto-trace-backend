// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/chats-service/domain/chat/service.go
//
// Generated by this command:
//
//	mockgen -source ./internal/chats-service/domain/chat/service.go -package chat_test
//

// Package chat_test is a generated GoMock package.
package chat_test

import (
	chat "car-sell-buy-system/internal/chats-service/domain/chat"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ListChats mocks base method.
func (m *MockRepository) ListChats(ctx context.Context) ([]chat.Chat, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListChats", ctx)
	ret0, _ := ret[0].([]chat.Chat)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListChats indicates an expected call of ListChats.
func (mr *MockRepositoryMockRecorder) ListChats(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListChats", reflect.TypeOf((*MockRepository)(nil).ListChats), ctx)
}

// ListMessagesByChatId mocks base method.
func (m *MockRepository) ListMessagesByChatId(ctx context.Context, chatId int64) ([]chat.Message, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessagesByChatId", ctx, chatId)
	ret0, _ := ret[0].([]chat.Message)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMessagesByChatId indicates an expected call of ListMessagesByChatId.
func (mr *MockRepositoryMockRecorder) ListMessagesByChatId(ctx, chatId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessagesByChatId", reflect.TypeOf((*MockRepository)(nil).ListMessagesByChatId), ctx, chatId)
}

// StoreChat mocks base method.
func (m *MockRepository) StoreChat(ctx context.Context, dto chat.StoreChatDTO) (chat.Chat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreChat", ctx, dto)
	ret0, _ := ret[0].(chat.Chat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreChat indicates an expected call of StoreChat.
func (mr *MockRepositoryMockRecorder) StoreChat(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreChat", reflect.TypeOf((*MockRepository)(nil).StoreChat), ctx, dto)
}

// StoreMessage mocks base method.
func (m *MockRepository) StoreMessage(ctx context.Context, chatId int64, dto chat.StoreMessageDTO) (chat.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreMessage", ctx, chatId, dto)
	ret0, _ := ret[0].(chat.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreMessage indicates an expected call of StoreMessage.
func (mr *MockRepositoryMockRecorder) StoreMessage(ctx, chatId, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreMessage", reflect.TypeOf((*MockRepository)(nil).StoreMessage), ctx, chatId, dto)
}
