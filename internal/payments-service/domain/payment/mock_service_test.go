// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ads-service/domain/payment/service.go
//
// Generated by this command:
//
//	mockgen -source ./internal/ads-service/domain/payment/service.go -package payment_test
//

// Package payment_test is a generated GoMock package.
package payment_test

import (
	payment "car-sell-buy-system/internal/payments-service/domain/payment"
	tariff "car-sell-buy-system/internal/payments-service/domain/tariff"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Store mocks base method.
func (m *MockRepository) Store(ctx context.Context, arg1 payment.Payment) (payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, arg1)
	ret0, _ := ret[0].(payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), ctx, arg1)
}

// UpdateStatusByTransactionId mocks base method.
func (m *MockRepository) UpdateStatusByTransactionId(ctx context.Context, transactionId, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByTransactionId", ctx, transactionId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusByTransactionId indicates an expected call of UpdateStatusByTransactionId.
func (mr *MockRepositoryMockRecorder) UpdateStatusByTransactionId(ctx, transactionId, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByTransactionId", reflect.TypeOf((*MockRepository)(nil).UpdateStatusByTransactionId), ctx, transactionId, status)
}

// MockTariffRepository is a mock of TariffRepository interface.
type MockTariffRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTariffRepositoryMockRecorder
	isgomock struct{}
}

// MockTariffRepositoryMockRecorder is the mock recorder for MockTariffRepository.
type MockTariffRepositoryMockRecorder struct {
	mock *MockTariffRepository
}

// NewMockTariffRepository creates a new mock instance.
func NewMockTariffRepository(ctrl *gomock.Controller) *MockTariffRepository {
	mock := &MockTariffRepository{ctrl: ctrl}
	mock.recorder = &MockTariffRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTariffRepository) EXPECT() *MockTariffRepositoryMockRecorder {
	return m.recorder
}

// GetByTransactionId mocks base method.
func (m *MockTariffRepository) GetById(ctx context.Context, id int64) (tariff.Tariff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionId", ctx, id)
	ret0, _ := ret[0].(tariff.Tariff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionId indicates an expected call of GetByTransactionId.
func (mr *MockTariffRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionId", reflect.TypeOf((*MockTariffRepository)(nil).GetById), ctx, id)
}

// MockApiRepository is a mock of ApiRepository interface.
type MockApiRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApiRepositoryMockRecorder
	isgomock struct{}
}

// MockApiRepositoryMockRecorder is the mock recorder for MockApiRepository.
type MockApiRepositoryMockRecorder struct {
	mock *MockApiRepository
}

// NewMockApiRepository creates a new mock instance.
func NewMockApiRepository(ctrl *gomock.Controller) *MockApiRepository {
	mock := &MockApiRepository{ctrl: ctrl}
	mock.recorder = &MockApiRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiRepository) EXPECT() *MockApiRepositoryMockRecorder {
	return m.recorder
}

// ConfirmPayment mocks base method.
func (m *MockApiRepository) ConfirmPayment(ctx context.Context, transactionId string) (payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmPayment", ctx, transactionId)
	ret0, _ := ret[0].(payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConfirmPayment indicates an expected call of ConfirmPayment.
func (mr *MockApiRepositoryMockRecorder) ConfirmPayment(ctx, transactionId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmPayment", reflect.TypeOf((*MockApiRepository)(nil).ConfirmPayment), ctx, transactionId)
}

// CreatePayment mocks base method.
func (m *MockApiRepository) CreatePayment(ctx context.Context, arg1 payment.Payment) (payment.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", ctx, arg1)
	ret0, _ := ret[0].(payment.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockApiRepositoryMockRecorder) CreatePayment(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockApiRepository)(nil).CreatePayment), ctx, arg1)
}
