// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/ads-service/domain/ad/service.go
//
// Generated by this command:
//
//	mockgen -source ./internal/ads-service/domain/ad/service.go -package ad_test
//

// Package ad_test is a generated GoMock package.
package ad_test

import (
	ad "car-sell-buy-system/internal/ads-service/domain/ad"
	nft "car-sell-buy-system/internal/ads-service/domain/nft"
	local "car-sell-buy-system/pkg/storage/local"
	context "context"
	big "math/big"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockStorage) Save(file *local.UploadedFile) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", file)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockStorageMockRecorder) Save(file any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorage)(nil).Save), file)
}

// MockNftRepository is a mock of NftRepository interface.
type MockNftRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNftRepositoryMockRecorder
	isgomock struct{}
}

// MockNftRepositoryMockRecorder is the mock recorder for MockNftRepository.
type MockNftRepositoryMockRecorder struct {
	mock *MockNftRepository
}

// NewMockNftRepository creates a new mock instance.
func NewMockNftRepository(ctrl *gomock.Controller) *MockNftRepository {
	mock := &MockNftRepository{ctrl: ctrl}
	mock.recorder = &MockNftRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNftRepository) EXPECT() *MockNftRepositoryMockRecorder {
	return m.recorder
}

// GetNftInfo mocks base method.
func (m *MockNftRepository) GetNftInfo(ctx context.Context, tokenId *big.Int) (nft.NFT, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNftInfo", ctx, tokenId)
	ret0, _ := ret[0].(nft.NFT)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNftInfo indicates an expected call of GetNftInfo.
func (mr *MockNftRepositoryMockRecorder) GetNftInfo(ctx, tokenId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNftInfo", reflect.TypeOf((*MockNftRepository)(nil).GetNftInfo), ctx, tokenId)
}

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, id)
}

// GetByTransactionId mocks base method.
func (m *MockRepository) GetById(ctx context.Context, id int64) (ad.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTransactionId", ctx, id)
	ret0, _ := ret[0].(ad.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTransactionId indicates an expected call of GetByTransactionId.
func (mr *MockRepositoryMockRecorder) GetById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTransactionId", reflect.TypeOf((*MockRepository)(nil).GetById), ctx, id)
}

// HandleFavorite mocks base method.
func (m *MockRepository) HandleFavorite(ctx context.Context, adId, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleFavorite", ctx, adId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleFavorite indicates an expected call of HandleFavorite.
func (mr *MockRepositoryMockRecorder) HandleFavorite(ctx, adId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFavorite", reflect.TypeOf((*MockRepository)(nil).HandleFavorite), ctx, adId, userId)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, dto ad.ListDTO) ([]ad.Ad, uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, dto)
	ret0, _ := ret[0].([]ad.Ad)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, dto)
}

// Store mocks base method.
func (m *MockRepository) Store(ctx context.Context, dto ad.StoreDTO) (ad.Ad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, dto)
	ret0, _ := ret[0].(ad.Ad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockRepositoryMockRecorder) Store(ctx, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockRepository)(nil).Store), ctx, dto)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, id int64, dto ad.UpdateDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, id, dto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, id, dto)
}
